/*************************************COD            ListMovePlay.DOWN
E******************************************************/
package com.cunoc.Logic.Parser;

import java_cup.runtime.*;

//////////////////////////
import java.util.ArrayList;
import com.cunoc.Logic.Parser.Ejecucion.Ejecutar;
import com.cunoc.Logic.Parser.HijosToke.Declaracion;
import com.cunoc.Logic.Parser.HijosToke.Operacion;
import com.cunoc.Logic.Parser.HijosToke.Valor;
import com.cunoc.Logic.Parser.Listados.TipoDato;
import com.cunoc.Logic.Parser.Listados.TipoOperacion;
import com.cunoc.Logic.Parser.Listados.TipoToke;
import com.cunoc.Logic.Parser.Listados.TipoVariable;

    parser code {:

	public parser(Lexema lexer) {
        super(lexer);
    }
    private int contador;
    private int errorCounter;
    private ArrayList<Toke> lista = new ArrayList<>();

    public ArrayList<Toke> getListMath(){
        return this.lista;
    }
    
    public void syntax_error(Symbol cur_token) {
        errorCounter++;
        System.out.println("\n Error "+errorCounter+" - Clase<"+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
            System.out.println("public void unrecoveredsyntax_error!!!!!!!!!!!!!!");
        }
    }

    public void printlnInter(String a){
         System.out.println(a);
    }
    /**
     * ***END CODE*******
     */
:}
/*************************************TERMINALES******************************************************/
terminal PUNTOYCOMA; /*PUNTUACION*/
terminal SUMAR,RESTAR,DIVIDIR,MULTIPLICAR,IGUAL;/*SIMBOLOS DE OPERACION*/
terminal PARENTESIS_A,PARENTESIS_C;/*AGRUPACION*/
terminal String BIGINT,NUMBER,NOMBRE; /*DATOS*/

terminal t_const,t_let,DOUBLEPUNTO;
terminal t_number,t_bigint;
/*************************************NO TERMINALES******************************************************/
non terminal Toke o,j;/*para el uso de operaciones aritmeticas*/
non terminal inicio,acciones,sematico,declaracion;
/*************************************PRECEDENCIA******************************************************/
precedence left SUMAR, RESTAR;
precedence left MULTIPLICAR, DIVIDIR;
/*************************************GRAMATICA******************************************************/
start with inicio;
/******operaciones matematicas*****/
inicio ::= acciones 
    {:	
    (new Ejecutar(lista)).ejecutar();	
    :}
    |
    ;

acciones
    ::= acciones sematico
    |sematico
    ;

sematico
    ::= 
    declaracion
    ;
declaracion
    ::=
    t_const NOMBRE:name  DOUBLEPUNTO t_number IGUAL j:valor PUNTOYCOMA 
    {:lista.add(new Declaracion((cur_token.right+1),(cur_token.left+1), TipoToke.DECLARACION.getText(),TipoVariable.CONST , TipoDato.NUMBER, name, valor));:}
    |t_let NOMBRE:name  DOUBLEPUNTO t_number IGUAL j:valor PUNTOYCOMA 
    {:lista.add(new Declaracion((cur_token.right+1),(cur_token.left+1), TipoToke.DECLARACION.getText(),TipoVariable.LET , TipoDato.NUMBER, name, valor));:}
    ;
/******operaciones matematicas*****/
j ::= o:a 
    {:RESULT = a;:} /*A QUI ESTA EL TOTAL DE LA OPERACION*/
    | error
    {::}
    ;
o ::= o:a SUMAR o:b 
{:RESULT = new Operacion((cur_token.right+1),(cur_token.left+1),TipoToke.OPERACION.getText(),b,a,TipoOperacion.SUMA);:}
|  o:a RESTAR o:b 
{:RESULT = new Operacion((cur_token.right+1),(cur_token.left+1),TipoToke.OPERACION.getText(),b,a,TipoOperacion.RESTA);:}
|  o:a DIVIDIR o:b 
{:RESULT = new Operacion((cur_token.right+1),(cur_token.left+1),TipoToke.OPERACION.getText(),b,a,TipoOperacion.DIVIDIR);:}
|  o:a MULTIPLICAR o:b 
{:RESULT = new Operacion((cur_token.right+1),(cur_token.left+1),TipoToke.OPERACION.getText(),b,a,TipoOperacion.MULTIPLICAR);:}
| PARENTESIS_A o:a PARENTESIS_C
{:RESULT = a;:}
| BIGINT:a 
{:RESULT = new Valor((cur_token.right+1),(cur_token.left+1),a , TipoDato.BIGINT);:}
| NUMBER:a 
{:RESULT = new Valor((cur_token.right+1),(cur_token.left+1),a , TipoDato.NUMBER);:}
| RESTAR o:a 
{:RESULT = new Valor((cur_token.right+1),(cur_token.left+1), "-"+a , TipoDato.NUMBER);:}
| NOMBRE:a 
{:RESULT = new Valor((cur_token.right+1),(cur_token.left+1),a , TipoDato.VARIABLE);:}
;