/*************************************COD            ListMovePlay.DOWN
E******************************************************/
package com.cunoc.Logic.Parser;

import java_cup.runtime.*;
import java.util.ArrayList;

    parser code {:

	public parser(Lexema lexer) {
        super(lexer);
    }
    
    private int contador;
    private int errorCounter;
    private ArrayList<ArrayList<String>> listMath = new ArrayList<>();

    public ArrayList<ArrayList<String>> getListMath(){
        return this.listMath;
    }
    
    private void addListMath(String type,String a,String b){
        if (listMath.isEmpty()) {
            ArrayList<String> rowTi = new ArrayList<>();
            rowTi.add("--Reporte de operadores matemáticos--");
            listMath.add(rowTi);
            ArrayList<String> row = new ArrayList<>();
            row.add("Operador");
            row.add("Línea");
            row.add("Columna");
            listMath.add(row);
        }
    ArrayList<String> row = new ArrayList<>();
    row.add(type);
    row.add((cur_token.left+1)+"");
    row.add((cur_token.right+1)+"");
    listMath.add(row);
}
    public void syntax_error(Symbol cur_token) {
        errorCounter++;
        System.out.println("\n"+errorCounter+" - Clase<"+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
            System.out.println("public void unrecoveredsyntax_error!!!!!!!!!!!!!!");
        }
    }
    /**
     * ***END CODE*******
     */
:}
/*************************************TERMINALES******************************************************/
terminal PUNTOYCOMA; /*PUNTUACION*/
terminal SUMAR,RESTAR,DIVIDIR,MULTIPLICAR;/*SIMBOLOS DE OPERACION*/
terminal PARENTESIS_A,PARENTESIS_C;/*AGRUPACION*/
terminal String ENTERO,DECIMAL; /*DATOS*/
terminal UP,LEFT,RIGHT,PUSH,DOWN;/*Acciones*/
/*************************************NO TERMINALES******************************************************/
non terminal String o,j;/*para el uso de operaciones aritmeticas*/
non terminal inicio,mover;
non terminal tipo_mover,mover_jugador,mover_caja,contador_mover,agrupar;
/*************************************PRECEDENCIA******************************************************/
precedence left SUMAR, RESTAR;
precedence left MULTIPLICAR, DIVIDIR;
/*************************************GRAMATICA******************************************************/
start with inicio;
/******operaciones matematicas*****/
inicio ::= 
    ;

/******operaciones matematicas*****/
j ::= o:a {:
    RESULT = a;
    double numeroUno= Double.valueOf(a);
    contador = (int) numeroUno;
           :} /*A QUI ESTA EL TOTAL DE LA OPERACION*/
           | error
           {:
           :}
           ;
o ::= o:a SUMAR o:b {:
                    double numeroUno= Double.valueOf(a);
                    double numeroDos= Double.valueOf(b);
                    double resultado = numeroUno+numeroDos;
                    addListMath("Suma",a,b);
                    RESULT = String.valueOf(resultado);
                    :}

|  o:a RESTAR o:b {:
                double numeroUno= Double.valueOf(a);
                double numeroDos= Double.valueOf(b);
                double resultado = numeroUno-numeroDos;
                addListMath("Resta",a,b);
                RESULT = String.valueOf(resultado);
                    :}

|  o:a DIVIDIR o:b {:
                    double numeroUno= Double.valueOf(a);
                    double numeroDos= Double.valueOf(b);
                    double resultado = numeroUno/numeroDos;
                    addListMath("Division",a,b);
                    RESULT = String.valueOf(resultado);
                    :}

|  o:a MULTIPLICAR o:b {:
                    double numeroUno= Double.valueOf(a);
                    double numeroDos= Double.valueOf(b);
                    double resultado = numeroUno*numeroDos;
                    addListMath("Multiplicacion",a,b);
                    RESULT = String.valueOf(resultado);
                    :}

| PARENTESIS_A o:a {: RESULT = a; :} PARENTESIS_C
| ENTERO:a {: RESULT = a; :}
| DECIMAL:a {: RESULT = a; :}
| RESTAR ENTERO:a {:
                    double numeroUno= Double.valueOf(a);
                    numeroUno = numeroUno*-1;
                    RESULT = String.valueOf(numeroUno);
 :}
;